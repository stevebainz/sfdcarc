//
// Generated by JSON2Apex http://json2apex.herokuapp.com/
//
// The supplied json has fields with names that are not valid in apex
// and so can only be parsed with explicitly generated code, this option
// was auto selected for you.

public class IPGeolocation {

	public class Time_zone {
		public String name {get;set;} 
		public Integer offset {get;set;} 
		public String current_time {get;set;} 
		public Double current_time_unix {get;set;} 
		public Boolean is_dst {get;set;} 
		public Integer dst_savings {get;set;} 

		public Time_zone(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'name') {
							name = parser.getText();
						} else if (text == 'offset') {
							offset = parser.getIntegerValue();
						} else if (text == 'current_time') {
							current_time = parser.getText();
						} else if (text == 'current_time_unix') {
							current_time_unix = parser.getDoubleValue();
						} else if (text == 'is_dst') {
							is_dst = parser.getBooleanValue();
						} else if (text == 'dst_savings') {
							dst_savings = parser.getIntegerValue();
						} else {
							System.debug(LoggingLevel.WARN, 'Time_zone consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	public String ip {get;set;} 
	public String hostname {get;set;} 
	public String continent_code {get;set;} 
	public String continent_name {get;set;} 
	public String country_code2 {get;set;} 
	public String country_code3 {get;set;} 
	public String country_name {get;set;} 
	public String country_capital {get;set;} 
	public String state_prov {get;set;} 
	public String district {get;set;} 
	public String city {get;set;} 
	public String zipcode {get;set;} 
	public String latitude {get;set;} 
	public String longitude {get;set;} 
	public Boolean is_eu {get;set;} 
	public String calling_code {get;set;} 
	public String country_tld {get;set;} 
	public String languages {get;set;} 
	public String country_flag {get;set;} 
	public String geoname_id {get;set;} 
	public String isp {get;set;} 
	public String connection_type {get;set;} 
	public String organization {get;set;} 
	public String asn {get;set;} 
	public Currency_Z currency_Z {get;set;} // in json: currency
	public Time_zone time_zone {get;set;} 

	public IPGeolocation(JSONParser parser) {
		while (parser.nextToken() != System.JSONToken.END_OBJECT) {
			if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
				String text = parser.getText();
				if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
					if (text == 'ip') {
						ip = parser.getText();
					} else if (text == 'hostname') {
						hostname = parser.getText();
					} else if (text == 'continent_code') {
						continent_code = parser.getText();
					} else if (text == 'continent_name') {
						continent_name = parser.getText();
					} else if (text == 'country_code2') {
						country_code2 = parser.getText();
					} else if (text == 'country_code3') {
						country_code3 = parser.getText();
					} else if (text == 'country_name') {
						country_name = parser.getText();
					} else if (text == 'country_capital') {
						country_capital = parser.getText();
					} else if (text == 'state_prov') {
						state_prov = parser.getText();
					} else if (text == 'district') {
						district = parser.getText();
					} else if (text == 'city') {
						city = parser.getText();
					} else if (text == 'zipcode') {
						zipcode = parser.getText();
					} else if (text == 'latitude') {
						latitude = parser.getText();
					} else if (text == 'longitude') {
						longitude = parser.getText();
					} else if (text == 'is_eu') {
						is_eu = parser.getBooleanValue();
					} else if (text == 'calling_code') {
						calling_code = parser.getText();
					} else if (text == 'country_tld') {
						country_tld = parser.getText();
					} else if (text == 'languages') {
						languages = parser.getText();
					} else if (text == 'country_flag') {
						country_flag = parser.getText();
					} else if (text == 'geoname_id') {
						geoname_id = parser.getText();
					} else if (text == 'isp') {
						isp = parser.getText();
					} else if (text == 'connection_type') {
						connection_type = parser.getText();
					} else if (text == 'organization') {
						organization = parser.getText();
					} else if (text == 'asn') {
						asn = parser.getText();
					} else if (text == 'currency') {
						currency_Z = new Currency_Z(parser);
					} else if (text == 'time_zone') {
						time_zone = new Time_zone(parser);
					} else {
						System.debug(LoggingLevel.WARN, 'IPGeolocation consuming unrecognized property: '+text);
						consumeObject(parser);
					}
				}
			}
		}
	}
	
	public class Currency_Z {
		public String code {get;set;} 
		public String name {get;set;} 
		public String symbol {get;set;} 

		public Currency_Z(JSONParser parser) {
			while (parser.nextToken() != System.JSONToken.END_OBJECT) {
				if (parser.getCurrentToken() == System.JSONToken.FIELD_NAME) {
					String text = parser.getText();
					if (parser.nextToken() != System.JSONToken.VALUE_NULL) {
						if (text == 'code') {
							code = parser.getText();
						} else if (text == 'name') {
							name = parser.getText();
						} else if (text == 'symbol') {
							symbol = parser.getText();
						} else {
							System.debug(LoggingLevel.WARN, 'Currency_Z consuming unrecognized property: '+text);
							consumeObject(parser);
						}
					}
				}
			}
		}
	}
	
	
	public static IPGeolocation parse(String json) {
		System.JSONParser parser = System.JSON.createParser(json);
		return new IPGeolocation(parser);
	}
	
	public static void consumeObject(System.JSONParser parser) {
		Integer depth = 0;
		do {
			System.JSONToken curr = parser.getCurrentToken();
			if (curr == System.JSONToken.START_OBJECT || 
				curr == System.JSONToken.START_ARRAY) {
				depth++;
			} else if (curr == System.JSONToken.END_OBJECT ||
				curr == System.JSONToken.END_ARRAY) {
				depth--;
			}
		} while (depth > 0 && parser.nextToken() != null);
	}
}